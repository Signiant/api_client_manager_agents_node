/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManageragentsApi);
  }
}(this, function(expect, ManageragentsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManageragentsApi.JobsApi();
  });

  describe('(package)', function() {
    describe('JobsApi', function() {
      describe('addJobVariable', function() {
        it('should call addJobVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for addJobVariable call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobname = "jobname_example";
          var jobgroup = "jobgroup_example";
          var opts = {};
          opts.jSONForAddeditVariablesForASpecifiedJob = new ManageragentsApi.JobArgs();
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingEmailBcc = "bccRecipient@example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingEmailCc = "ccRecipient@example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingEmailTo = "Recipient@example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingEmailCondition = "Never";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingSpLogSeverity = "Info";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderNotificationAndLoggingEmailJobFailureReportTo = "Recipient@example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderOptionsSpEncryption = "high";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderOptionsDeliveryMode = "yes";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderScheduleSpFrequency = "DAILY";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderScheduleSpInterruptOnFailure = "no";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderScheduleSpStartAt = "YYYY/MM/DD HH:MM:SS";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderScheduleFinishBefore = "YYYY/MM/DD HH:MM:SS";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSchedulePriority = "Medium";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderScheduleTimezone = "America/New_York";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceExcludeFiles = "";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceExcludeSubDirList = "temp, in_progress, configs";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceExcludeSubdirectories = "Specified";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceFileReadinessCheckDelay = "10";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceFileReadinessCheckType = "None";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceIncludeFiles = "*";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceSourceAgent = "example-source.agent.example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceSourceData = "<siglist type="filedir"><el v="/path/to/file.txt"></el></siglist>";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceSourceDeletionsAfterSuccessfulTransfer = "None";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderSourceSourceDirectoriestoExcludefromDeletionScan = "in_progress";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTargetTargetAgent = "example-target.agent.example.com";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTargetTargetObjectStorage = "{"name":"Profile Name"}";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportBandwidthCeiling = "0";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportBandwidthFloor = "0";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportBandwidthThrottleByTimeOfDay = "09:50;16:55;NYYYYYN;25000000;";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportUseWANAccelerator = "yes";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportSpUdp = "no";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportSimultaneousTransferStreams = "6";
          opts.jSONForAddeditVariablesForASpecifiedJob.objectUploaderTransportWANAcceleratorAggressiveness = "medium";
          opts.jSONForAddeditVariablesForASpecifiedJob.notes = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";

          instance.addJobVariable(username, password, jobname, jobgroup, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('commandsForJob', function() {
        it('should call commandsForJob successfully', function(done) {
          // TODO: uncomment, update parameter values for commandsForJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobname = "jobname_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";
          var command = "command_example";

          instance.commandsForJob(username, password, jobname, jobgroupnamejobgroupID, command, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createJob', function() {
        it('should call createJob successfully', function(done) {
          // TODO: uncomment, update parameter values for createJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var opts = {};
          opts.jSONForCreateAJob = new ManageragentsApi.Job();

          instance.createJob(username, password, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.CreateJobResponse);
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("admin");
            {
              let dataCtr = data.jobs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteJob', function() {
        it('should call deleteJob successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobname = "jobname_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";

          instance.deleteJob(username, password, jobname, jobgroupnamejobgroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFileLogWithRunNumber', function() {
        it('should call getFileLogWithRunNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for getFileLogWithRunNumber call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupNamejobGroupID = "jobGroupNamejobGroupID_example";
          var runNumber = "runNumber_example";

          instance.getFileLogWithRunNumber(username, password, jobName, jobGroupNamejobGroupID, runNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.FileLog);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(1);
            expect(data.deliveryRecords).to.be.a('number');
            expect(data.deliveryRecords).to.be(1);
            expect(data.validCount).to.be.a('number');
            expect(data.validCount).to.be(1);
            expect(data.certifiedCount).to.be.a('number');
            expect(data.certifiedCount).to.be(1);
            expect(data.fileLog).to.be.a(Object);
            expect(data.fileLog).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJob', function() {
        it('should call getJob successfully', function(done) {
          // TODO: uncomment, update parameter values for getJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobname = "jobname_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";

          instance.getJob(username, password, jobname, jobgroupnamejobgroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.GetJob);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobByID', function() {
        it('should call getJobByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobByID call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobID = 56;

          instance.getJobByID(username, password, jobID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.GetJob);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobFileLog', function() {
        it('should call getJobFileLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobFileLog call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupNamejobGroupID = "jobGroupNamejobGroupID_example";

          instance.getJobFileLog(username, password, jobName, jobGroupNamejobGroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.FileLog);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(1);
            expect(data.deliveryRecords).to.be.a('number');
            expect(data.deliveryRecords).to.be(1);
            expect(data.validCount).to.be.a('number');
            expect(data.validCount).to.be(1);
            expect(data.certifiedCount).to.be.a('number');
            expect(data.certifiedCount).to.be(1);
            expect(data.fileLog).to.be.a(Object);
            expect(data.fileLog).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobLog', function() {
        it('should call getJobLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobLog call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupName = "jobGroupName_example";

          instance.getJobLog(username, password, jobName, jobGroupName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.JobLog);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobLogWithRunNumber', function() {
        it('should call getJobLogWithRunNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobLogWithRunNumber call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupName = "jobGroupName_example";
          var runNumber = "runNumber_example";

          instance.getJobLogWithRunNumber(username, password, jobName, jobGroupName, runNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.JobLog);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobView', function() {
        it('should call getJobView successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobView call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobviewnamejobviewID = "jobviewnamejobviewID_example";

          instance.getJobView(username, password, jobviewnamejobviewID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.JobView);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListJobs', function() {
        it('should call getListJobs successfully', function(done) {
          // TODO: uncomment, update parameter values for getListJobs call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";

          instance.getListJobs(username, password, jobgroupnamejobgroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.ListJobs);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStatsLog', function() {
        it('should call getStatsLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getStatsLog call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupNamejobGroupID = "jobGroupNamejobGroupID_example";

          instance.getStatsLog(username, password, jobName, jobGroupNamejobGroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.StatisticLog);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(1);
            expect(data.statsLog).to.be.a(Object);
            expect(data.statsLog).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStatsLogWithRunNumber', function() {
        it('should call getStatsLogWithRunNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for getStatsLogWithRunNumber call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobName = "jobName_example";
          var jobGroupNamejobGroupID = "jobGroupNamejobGroupID_example";
          var runNumber = "runNumber_example";

          instance.getStatsLogWithRunNumber(username, password, jobName, jobGroupNamejobGroupID, runNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.StatisticLog);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(1);
            expect(data.statsLog).to.be.a(Object);
            expect(data.statsLog).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('hardDeleteJob', function() {
        it('should call hardDeleteJob successfully', function(done) {
          // TODO: uncomment, update parameter values for hardDeleteJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var opts = {};
          opts.jSONForHardDeleteJob = new ManageragentsApi.DeleteJob();

          instance.hardDeleteJob(username, password, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('statsJob', function() {
        it('should call statsJob successfully', function(done) {
          // TODO: uncomment, update parameter values for statsJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var jobname = "jobname_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";
          var opts = {};
          opts.jSONToVieweditStatsForTheJob = new ManageragentsApi.Stats();

          instance.statsJob(username, password, jobname, jobgroupnamejobgroupID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.StatsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('statsRunNumberJob', function() {
        it('should call statsRunNumberJob successfully', function(done) {
          // TODO: uncomment, update parameter values for statsRunNumberJob call and complete the assertions
          /*
          var jobname = "jobname_example";
          var jobgroupnamejobgroupID = "jobgroupnamejobgroupID_example";
          var runnumber = "runnumber_example";
          var opts = {};
          opts.username = "username_example";
          opts.password = "password_example";
          opts.jSONToVieweditStatsForTheJob = new ManageragentsApi.Stats();

          instance.statsRunNumberJob(jobname, jobgroupnamejobgroupID, runnumber, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.StatsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateJob', function() {
        it('should call updateJob successfully', function(done) {
          // TODO: uncomment, update parameter values for updateJob call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var opts = {};
          opts.jSONForEditAJob = new ManageragentsApi.EditJob();

          instance.updateJob(username, password, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
