/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManageragentsApi);
  }
}(this, function(expect, ManageragentsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManageragentsApi.AgentGroupsApi();
  });

  describe('(package)', function() {
    describe('AgentGroupsApi', function() {
      describe('createAgentGroup', function() {
        it('should call createAgentGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createAgentGroup call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var opts = {};
          opts.jSONForCreateAgentGroup = new ManageragentsApi.AgentGroup();

          instance.createAgentGroup(username, password, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.CreateAgentGroupResponse);
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("admin");
            {
              let dataCtr = data.agentGroups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAgentGroup', function() {
        it('should call deleteAgentGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAgentGroup call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var agentgroupnameagentgroupID = "agentgroupnameagentgroupID_example";

          instance.deleteAgentGroup(username, password, agentgroupnameagentgroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editAgentGroup', function() {
        it('should call editAgentGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for editAgentGroup call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var opts = {};
          opts.jSONForEditAgentGroup = new ManageragentsApi.PutAgentGroupsObject();
          opts.jSONForEditAgentGroup.id = 11;
          opts.jSONForEditAgentGroup.groupName = "Agent group";
          opts.jSONForEditAgentGroup.addedMembers = [new ManageragentsApi.AddAgentGroupMembers()];
          opts.jSONForEditAgentGroup.addedMembers[0].name = "AddThisAgent.example.com";
          opts.jSONForEditAgentGroup.removedMembers = [new ManageragentsApi.RemoveAgentGroupMembers()];
          opts.jSONForEditAgentGroup.removedMembers[0].name = "RemoveThisAgent.example.com";
          opts.jSONForEditAgentGroup.fields = ;

          instance.editAgentGroup(username, password, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.Success);
            expect(data.success).to.be.a('string');
            expect(data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAgentGroup', function() {
        it('should call getAgentGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getAgentGroup call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";
          var agentgroupnameagentgroupID = "agentgroupnameagentgroupID_example";

          instance.getAgentGroup(username, password, agentgroupnameagentgroupID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.GetAgentGroup);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAgentGroups', function() {
        it('should call getAgentGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getAgentGroups call and complete the assertions
          /*
          var username = "username_example";
          var password = "password_example";

          instance.getAgentGroups(username, password, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ManageragentsApi.AgentGroups);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
