/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManageragentsApi);
  }
}(this, function(expect, ManageragentsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('JobArgs', function() {
      beforeEach(function() {
        instance = new ManageragentsApi.JobArgs();
      });

      it('should create an instance of JobArgs', function() {
        // TODO: update the code to test JobArgs
        expect(instance).to.be.a(ManageragentsApi.JobArgs);
      });

      it('should have the property objectUploaderNotificationAndLoggingEmailBcc (base name: "ObjectUploader.NotificationAndLogging.EmailBcc")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingEmailBcc
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingEmailBcc');
        // expect(instance.objectUploaderNotificationAndLoggingEmailBcc).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderNotificationAndLoggingEmailCc (base name: "ObjectUploader.NotificationAndLogging.EmailCc")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingEmailCc
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingEmailCc');
        // expect(instance.objectUploaderNotificationAndLoggingEmailCc).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderNotificationAndLoggingEmailTo (base name: "ObjectUploader.NotificationAndLogging.EmailTo")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingEmailTo
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingEmailTo');
        // expect(instance.objectUploaderNotificationAndLoggingEmailTo).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderNotificationAndLoggingEmailCondition (base name: "ObjectUploader.NotificationAndLogging.EmailCondition")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingEmailCondition
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingEmailCondition');
        // expect(instance.objectUploaderNotificationAndLoggingEmailCondition).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderNotificationAndLoggingSpLogSeverity (base name: "ObjectUploader.NotificationAndLogging._sp_log_severity")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingSpLogSeverity
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingSpLogSeverity');
        // expect(instance.objectUploaderNotificationAndLoggingSpLogSeverity).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderNotificationAndLoggingEmailJobFailureReportTo (base name: "ObjectUploader.NotificationAndLogging.emailJobFailureReportTo")', function() {
        // TODO: update the code to test the property objectUploaderNotificationAndLoggingEmailJobFailureReportTo
        expect(instance).to.have.property('objectUploaderNotificationAndLoggingEmailJobFailureReportTo');
        // expect(instance.objectUploaderNotificationAndLoggingEmailJobFailureReportTo).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderOptionsSpEncryption (base name: "ObjectUploader.Options._sp_encryption")', function() {
        // TODO: update the code to test the property objectUploaderOptionsSpEncryption
        expect(instance).to.have.property('objectUploaderOptionsSpEncryption');
        // expect(instance.objectUploaderOptionsSpEncryption).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderOptionsDeliveryMode (base name: "ObjectUploader.Options.deliveryMode")', function() {
        // TODO: update the code to test the property objectUploaderOptionsDeliveryMode
        expect(instance).to.have.property('objectUploaderOptionsDeliveryMode');
        // expect(instance.objectUploaderOptionsDeliveryMode).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderScheduleSpFrequency (base name: "ObjectUploader.Schedule._sp_frequency")', function() {
        // TODO: update the code to test the property objectUploaderScheduleSpFrequency
        expect(instance).to.have.property('objectUploaderScheduleSpFrequency');
        // expect(instance.objectUploaderScheduleSpFrequency).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderScheduleSpInterruptOnFailure (base name: "ObjectUploader.Schedule._sp_interrupt_on_failure")', function() {
        // TODO: update the code to test the property objectUploaderScheduleSpInterruptOnFailure
        expect(instance).to.have.property('objectUploaderScheduleSpInterruptOnFailure');
        // expect(instance.objectUploaderScheduleSpInterruptOnFailure).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderScheduleSpStartAt (base name: "ObjectUploader.Schedule._sp_start_at")', function() {
        // TODO: update the code to test the property objectUploaderScheduleSpStartAt
        expect(instance).to.have.property('objectUploaderScheduleSpStartAt');
        // expect(instance.objectUploaderScheduleSpStartAt).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderScheduleFinishBefore (base name: "ObjectUploader.Schedule.finishBefore")', function() {
        // TODO: update the code to test the property objectUploaderScheduleFinishBefore
        expect(instance).to.have.property('objectUploaderScheduleFinishBefore');
        // expect(instance.objectUploaderScheduleFinishBefore).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSchedulePriority (base name: "ObjectUploader.Schedule.priority")', function() {
        // TODO: update the code to test the property objectUploaderSchedulePriority
        expect(instance).to.have.property('objectUploaderSchedulePriority');
        // expect(instance.objectUploaderSchedulePriority).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderScheduleTimezone (base name: "ObjectUploader.Schedule.timezone")', function() {
        // TODO: update the code to test the property objectUploaderScheduleTimezone
        expect(instance).to.have.property('objectUploaderScheduleTimezone');
        // expect(instance.objectUploaderScheduleTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceExcludeFiles (base name: "ObjectUploader.Source.ExcludeFiles")', function() {
        // TODO: update the code to test the property objectUploaderSourceExcludeFiles
        expect(instance).to.have.property('objectUploaderSourceExcludeFiles');
        // expect(instance.objectUploaderSourceExcludeFiles).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceExcludeSubDirList (base name: "ObjectUploader.Source.ExcludeSubDirList")', function() {
        // TODO: update the code to test the property objectUploaderSourceExcludeSubDirList
        expect(instance).to.have.property('objectUploaderSourceExcludeSubDirList');
        // expect(instance.objectUploaderSourceExcludeSubDirList).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceExcludeSubdirectories (base name: "ObjectUploader.Source.ExcludeSubdirectories")', function() {
        // TODO: update the code to test the property objectUploaderSourceExcludeSubdirectories
        expect(instance).to.have.property('objectUploaderSourceExcludeSubdirectories');
        // expect(instance.objectUploaderSourceExcludeSubdirectories).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceFileReadinessCheckDelay (base name: "ObjectUploader.Source.FileReadinessCheckDelay")', function() {
        // TODO: update the code to test the property objectUploaderSourceFileReadinessCheckDelay
        expect(instance).to.have.property('objectUploaderSourceFileReadinessCheckDelay');
        // expect(instance.objectUploaderSourceFileReadinessCheckDelay).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceFileReadinessCheckType (base name: "ObjectUploader.Source.FileReadinessCheckType")', function() {
        // TODO: update the code to test the property objectUploaderSourceFileReadinessCheckType
        expect(instance).to.have.property('objectUploaderSourceFileReadinessCheckType');
        // expect(instance.objectUploaderSourceFileReadinessCheckType).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceIncludeFiles (base name: "ObjectUploader.Source.IncludeFiles")', function() {
        // TODO: update the code to test the property objectUploaderSourceIncludeFiles
        expect(instance).to.have.property('objectUploaderSourceIncludeFiles');
        // expect(instance.objectUploaderSourceIncludeFiles).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceSourceAgent (base name: "ObjectUploader.Source.SourceAgent")', function() {
        // TODO: update the code to test the property objectUploaderSourceSourceAgent
        expect(instance).to.have.property('objectUploaderSourceSourceAgent');
        // expect(instance.objectUploaderSourceSourceAgent).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceSourceData (base name: "ObjectUploader.Source.SourceData")', function() {
        // TODO: update the code to test the property objectUploaderSourceSourceData
        expect(instance).to.have.property('objectUploaderSourceSourceData');
        // expect(instance.objectUploaderSourceSourceData).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceSourceDeletionsAfterSuccessfulTransfer (base name: "ObjectUploader.Source.sourceDeletionsAfterSuccessfulTransfer")', function() {
        // TODO: update the code to test the property objectUploaderSourceSourceDeletionsAfterSuccessfulTransfer
        expect(instance).to.have.property('objectUploaderSourceSourceDeletionsAfterSuccessfulTransfer');
        // expect(instance.objectUploaderSourceSourceDeletionsAfterSuccessfulTransfer).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderSourceSourceDirectoriestoExcludefromDeletionScan (base name: "ObjectUploader.Source.sourceDirectoriestoExcludefromDeletionScan")', function() {
        // TODO: update the code to test the property objectUploaderSourceSourceDirectoriestoExcludefromDeletionScan
        expect(instance).to.have.property('objectUploaderSourceSourceDirectoriestoExcludefromDeletionScan');
        // expect(instance.objectUploaderSourceSourceDirectoriestoExcludefromDeletionScan).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTargetTargetAgent (base name: "ObjectUploader.Target.targetAgent")', function() {
        // TODO: update the code to test the property objectUploaderTargetTargetAgent
        expect(instance).to.have.property('objectUploaderTargetTargetAgent');
        // expect(instance.objectUploaderTargetTargetAgent).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTargetTargetObjectStorage (base name: "ObjectUploader.Target.targetObjectStorage")', function() {
        // TODO: update the code to test the property objectUploaderTargetTargetObjectStorage
        expect(instance).to.have.property('objectUploaderTargetTargetObjectStorage');
        // expect(instance.objectUploaderTargetTargetObjectStorage).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportBandwidthCeiling (base name: "ObjectUploader.Transport.BandwidthCeiling")', function() {
        // TODO: update the code to test the property objectUploaderTransportBandwidthCeiling
        expect(instance).to.have.property('objectUploaderTransportBandwidthCeiling');
        // expect(instance.objectUploaderTransportBandwidthCeiling).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportBandwidthFloor (base name: "ObjectUploader.Transport.BandwidthFloor")', function() {
        // TODO: update the code to test the property objectUploaderTransportBandwidthFloor
        expect(instance).to.have.property('objectUploaderTransportBandwidthFloor');
        // expect(instance.objectUploaderTransportBandwidthFloor).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportBandwidthThrottleByTimeOfDay (base name: "ObjectUploader.Transport.BandwidthThrottleByTimeOfDay")', function() {
        // TODO: update the code to test the property objectUploaderTransportBandwidthThrottleByTimeOfDay
        expect(instance).to.have.property('objectUploaderTransportBandwidthThrottleByTimeOfDay');
        // expect(instance.objectUploaderTransportBandwidthThrottleByTimeOfDay).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportUseWANAccelerator (base name: "ObjectUploader.Transport.UseWANAccelerator")', function() {
        // TODO: update the code to test the property objectUploaderTransportUseWANAccelerator
        expect(instance).to.have.property('objectUploaderTransportUseWANAccelerator');
        // expect(instance.objectUploaderTransportUseWANAccelerator).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportSpUdp (base name: "ObjectUploader.Transport._sp_udp")', function() {
        // TODO: update the code to test the property objectUploaderTransportSpUdp
        expect(instance).to.have.property('objectUploaderTransportSpUdp');
        // expect(instance.objectUploaderTransportSpUdp).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportSimultaneousTransferStreams (base name: "ObjectUploader.Transport.simultaneousTransferStreams")', function() {
        // TODO: update the code to test the property objectUploaderTransportSimultaneousTransferStreams
        expect(instance).to.have.property('objectUploaderTransportSimultaneousTransferStreams');
        // expect(instance.objectUploaderTransportSimultaneousTransferStreams).to.be(expectedValueLiteral);
      });

      it('should have the property objectUploaderTransportWANAcceleratorAggressiveness (base name: "ObjectUploader.Transport.wANAcceleratorAggressiveness")', function() {
        // TODO: update the code to test the property objectUploaderTransportWANAcceleratorAggressiveness
        expect(instance).to.have.property('objectUploaderTransportWANAcceleratorAggressiveness');
        // expect(instance.objectUploaderTransportWANAcceleratorAggressiveness).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

    });
  });

}));
