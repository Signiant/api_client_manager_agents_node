/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManageragentsApi);
  }
}(this, function(expect, ManageragentsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateS3StorageProfile', function() {
      beforeEach(function() {
        instance = new ManageragentsApi.CreateS3StorageProfile();
      });

      it('should create an instance of CreateS3StorageProfile', function() {
        // TODO: update the code to test CreateS3StorageProfile
        expect(instance).to.be.a(ManageragentsApi.CreateS3StorageProfile);
      });

      it('should have the property storageType (base name: "storageType")', function() {
        // TODO: update the code to test the property storageType
        expect(instance).to.have.property('storageType');
        // expect(instance.storageType).to.be(expectedValueLiteral);
      });

      it('should have the property storageServer (base name: "storageServer")', function() {
        // TODO: update the code to test the property storageServer
        expect(instance).to.have.property('storageServer');
        // expect(instance.storageServer).to.be(expectedValueLiteral);
      });

      it('should have the property bucket (base name: "bucket")', function() {
        // TODO: update the code to test the property bucket
        expect(instance).to.have.property('bucket');
        // expect(instance.bucket).to.be(expectedValueLiteral);
      });

      it('should have the property subFolder (base name: "subFolder")', function() {
        // TODO: update the code to test the property subFolder
        expect(instance).to.have.property('subFolder');
        // expect(instance.subFolder).to.be(expectedValueLiteral);
      });

      it('should have the property accessStyle (base name: "accessStyle")', function() {
        // TODO: update the code to test the property accessStyle
        expect(instance).to.have.property('accessStyle');
        // expect(instance.accessStyle).to.be(expectedValueLiteral);
      });

      it('should have the property accessKey (base name: "accessKey")', function() {
        // TODO: update the code to test the property accessKey
        expect(instance).to.have.property('accessKey');
        // expect(instance.accessKey).to.be(expectedValueLiteral);
      });

      it('should have the property secretKey (base name: "secretKey")', function() {
        // TODO: update the code to test the property secretKey
        expect(instance).to.have.property('secretKey');
        // expect(instance.secretKey).to.be(expectedValueLiteral);
      });

      it('should have the property accessAcls (base name: "accessAcls")', function() {
        // TODO: update the code to test the property accessAcls
        expect(instance).to.have.property('accessAcls');
        // expect(instance.accessAcls).to.be(expectedValueLiteral);
      });

    });
  });

}));
