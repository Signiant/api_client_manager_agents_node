/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AgentGroup', 'model/AgentGroups', 'model/CreateAgentGroupResponse', 'model/GetAgentGroup', 'model/PutAgentGroupsObject', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AgentGroup'), require('../model/AgentGroups'), require('../model/CreateAgentGroupResponse'), require('../model/GetAgentGroup'), require('../model/PutAgentGroupsObject'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.ManageragentsApi) {
      root.ManageragentsApi = {};
    }
    root.ManageragentsApi.AgentGroupsApi = factory(root.ManageragentsApi.ApiClient, root.ManageragentsApi.AgentGroup, root.ManageragentsApi.AgentGroups, root.ManageragentsApi.CreateAgentGroupResponse, root.ManageragentsApi.GetAgentGroup, root.ManageragentsApi.PutAgentGroupsObject, root.ManageragentsApi.Success);
  }
}(this, function(ApiClient, AgentGroup, AgentGroups, CreateAgentGroupResponse, GetAgentGroup, PutAgentGroupsObject, Success) {
  'use strict';

  /**
   * AgentGroups service.
   * @module api/AgentGroupsApi
   * @version 14.1.0
   */

  /**
   * Constructs a new AgentGroupsApi. 
   * @alias module:api/AgentGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAgentGroup operation.
     * @callback module:api/AgentGroupsApi~createAgentGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAgentGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create agent group
     * Creates a new agent group
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgentGroup} opts.jSONForCreateAgentGroup 
     * @param {module:api/AgentGroupsApi~createAgentGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAgentGroupResponse}
     */
    this.createAgentGroup = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForCreateAgentGroup'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createAgentGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createAgentGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAgentGroupResponse;

      return this.apiClient.callApi(
        '/agentgroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAgentGroup operation.
     * @callback module:api/AgentGroupsApi~deleteAgentGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete agent group
     * Delete specific agent group by name or agent group ID
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} agentgroupnameagentgroupID The **groupName** or **agentGroupID**
     * @param {module:api/AgentGroupsApi~deleteAgentGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.deleteAgentGroup = function(username, password, agentgroupnameagentgroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteAgentGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deleteAgentGroup");
      }

      // verify the required parameter 'agentgroupnameagentgroupID' is set
      if (agentgroupnameagentgroupID === undefined || agentgroupnameagentgroupID === null) {
        throw new Error("Missing the required parameter 'agentgroupnameagentgroupID' when calling deleteAgentGroup");
      }


      var pathParams = {
        'agentgroupname|agentgroupID': agentgroupnameagentgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/agentgroups/{agentgroupname|agentgroupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editAgentGroup operation.
     * @callback module:api/AgentGroupsApi~editAgentGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit agent group
     * Edit an existing agent group.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/PutAgentGroupsObject} opts.jSONForEditAgentGroup 
     * @param {module:api/AgentGroupsApi~editAgentGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.editAgentGroup = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForEditAgentGroup'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling editAgentGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling editAgentGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/agentgroups', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentGroup operation.
     * @callback module:api/AgentGroupsApi~getAgentGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAgentGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View Agent Group
     * Return a specific agent group by **groupName** or **agentGroupId**
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} agentgroupnameagentgroupID The **groupName** or **agentGroupId** of the agent group you want to view.
     * @param {module:api/AgentGroupsApi~getAgentGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAgentGroup}
     */
    this.getAgentGroup = function(username, password, agentgroupnameagentgroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAgentGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getAgentGroup");
      }

      // verify the required parameter 'agentgroupnameagentgroupID' is set
      if (agentgroupnameagentgroupID === undefined || agentgroupnameagentgroupID === null) {
        throw new Error("Missing the required parameter 'agentgroupnameagentgroupID' when calling getAgentGroup");
      }


      var pathParams = {
        'agentgroupname|agentgroupID': agentgroupnameagentgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAgentGroup;

      return this.apiClient.callApi(
        '/agentgroups/{agentgroupname|agentgroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentGroups operation.
     * @callback module:api/AgentGroupsApi~getAgentGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgentGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all agent groups
     * Return a list of all agent groups
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {module:api/AgentGroupsApi~getAgentGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgentGroups}
     */
    this.getAgentGroups = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAgentGroups");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getAgentGroups");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AgentGroups;

      return this.apiClient.callApi(
        '/listagentgroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
