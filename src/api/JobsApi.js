/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateJobResponse', 'model/DeleteJob', 'model/EditJob', 'model/FileLog', 'model/GetJob', 'model/Job', 'model/JobArgs', 'model/JobLog', 'model/JobView', 'model/ListJobs', 'model/StatisticLog', 'model/Stats', 'model/StatsResponse', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateJobResponse'), require('../model/DeleteJob'), require('../model/EditJob'), require('../model/FileLog'), require('../model/GetJob'), require('../model/Job'), require('../model/JobArgs'), require('../model/JobLog'), require('../model/JobView'), require('../model/ListJobs'), require('../model/StatisticLog'), require('../model/Stats'), require('../model/StatsResponse'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.ManageragentsApi) {
      root.ManageragentsApi = {};
    }
    root.ManageragentsApi.JobsApi = factory(root.ManageragentsApi.ApiClient, root.ManageragentsApi.CreateJobResponse, root.ManageragentsApi.DeleteJob, root.ManageragentsApi.EditJob, root.ManageragentsApi.FileLog, root.ManageragentsApi.GetJob, root.ManageragentsApi.Job, root.ManageragentsApi.JobArgs, root.ManageragentsApi.JobLog, root.ManageragentsApi.JobView, root.ManageragentsApi.ListJobs, root.ManageragentsApi.StatisticLog, root.ManageragentsApi.Stats, root.ManageragentsApi.StatsResponse, root.ManageragentsApi.Success);
  }
}(this, function(ApiClient, CreateJobResponse, DeleteJob, EditJob, FileLog, GetJob, Job, JobArgs, JobLog, JobView, ListJobs, StatisticLog, Stats, StatsResponse, Success) {
  'use strict';

  /**
   * Jobs service.
   * @module api/JobsApi
   * @version 14.1.0
   */

  /**
   * Constructs a new JobsApi. 
   * @alias module:api/JobsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addJobVariable operation.
     * @callback module:api/JobsApi~addJobVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit or add job arguments/variables for a specified job
     * Add or edit job variables for a specified job
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobname 
     * @param {String} jobgroup 
     * @param {Object} opts Optional parameters
     * @param {module:model/JobArgs} opts.jSONForAddeditVariablesForASpecifiedJob 
     * @param {module:api/JobsApi~addJobVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.addJobVariable = function(username, password, jobname, jobgroup, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForAddeditVariablesForASpecifiedJob'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addJobVariable");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling addJobVariable");
      }

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling addJobVariable");
      }

      // verify the required parameter 'jobgroup' is set
      if (jobgroup === undefined || jobgroup === null) {
        throw new Error("Missing the required parameter 'jobgroup' when calling addJobVariable");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroup': jobgroup
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/jobs/variables/{jobname}/{jobgroup}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsForJob operation.
     * @callback module:api/JobsApi~commandsForJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send commands to a job
     *  Send commands to a job by specifying the job name, job group name or ID, and a command.  Valid job commands:  * `force` - Start the job immediately. * `kill` - Cancel the running job. * `suspend` - Prevent future scheduled runs of the job, and prevent it from running automatically in the future. * `resume` - Resume a suspended job. * `delete` - Remove the job from the manager. * `setbwlimits` - Set the bandwidth limits for a job. For more information, see [the getting started guide](https://developer.signiant.com/manager-agents/get-started-with-rest.html#bandwidth-limits). 
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobname 
     * @param {String} jobgroupnamejobgroupID 
     * @param {String} command cancel, delete, pause or continue
     * @param {module:api/JobsApi~commandsForJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.commandsForJob = function(username, password, jobname, jobgroupnamejobgroupID, command, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling commandsForJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling commandsForJob");
      }

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling commandsForJob");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling commandsForJob");
      }

      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling commandsForJob");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID,
        'command': command
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/jobs/command/{jobname}/{jobgroupname|jobgroupID}/{command}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/JobsApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new job
     * Create a new job. For more information on creating Media Mover or Object Mover jobs, see [REST API Job examples](https://developer.signiant.com/manager-agents/job-examples.html) and [Scheduling Jobs](https://developer.signiant.com/manager-agents/job-scheduling.html).
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/Job} opts.jSONForCreateAJob 
     * @param {module:api/JobsApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobResponse}
     */
    this.createJob = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForCreateAJob'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateJobResponse;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/JobsApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Soft delete a job by name or ID
     * Delete a job from the manager and mark a job to be deleted from the database when the next maintenance job runs.
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobname 
     * @param {String} jobgroupnamejobgroupID 
     * @param {module:api/JobsApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.deleteJob = function(username, password, jobname, jobgroupnamejobgroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deleteJob");
      }

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling deleteJob");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling deleteJob");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/jobs/{jobname}/{jobgroupname|jobgroupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileLogWithRunNumber operation.
     * @callback module:api/JobsApi~getFileLogWithRunNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the file log for a job in some job group for a specific job run
     * The file log from some job for a specific job run
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupNamejobGroupID 
     * @param {String} runNumber can be 0, 1 or 2
     * @param {module:api/JobsApi~getFileLogWithRunNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileLog}
     */
    this.getFileLogWithRunNumber = function(username, password, jobName, jobGroupNamejobGroupID, runNumber, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getFileLogWithRunNumber");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getFileLogWithRunNumber");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getFileLogWithRunNumber");
      }

      // verify the required parameter 'jobGroupNamejobGroupID' is set
      if (jobGroupNamejobGroupID === undefined || jobGroupNamejobGroupID === null) {
        throw new Error("Missing the required parameter 'jobGroupNamejobGroupID' when calling getFileLogWithRunNumber");
      }

      // verify the required parameter 'runNumber' is set
      if (runNumber === undefined || runNumber === null) {
        throw new Error("Missing the required parameter 'runNumber' when calling getFileLogWithRunNumber");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName|jobGroupID': jobGroupNamejobGroupID,
        'runNumber': runNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileLog;

      return this.apiClient.callApi(
        '/jobs/filelog/{jobName}/{jobGroupName|jobGroupID}/{runNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/JobsApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View job by name
     * Display the details and properties associated with a specific job. To retrieve jobs by name, you must specify a `jobGroupName` or `jobGroupId`
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobname 
     * @param {String} jobgroupnamejobgroupID 
     * @param {module:api/JobsApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJob}
     */
    this.getJob = function(username, password, jobname, jobgroupnamejobgroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJob");
      }

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling getJob");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling getJob");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetJob;

      return this.apiClient.callApi(
        '/jobs/{jobname}/{jobgroupname|jobgroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobByID operation.
     * @callback module:api/JobsApi~getJobByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View job by job ID
     * Display the details and properties associated with a specific job.
     * @param {String} username 
     * @param {String} password 
     * @param {Number} jobID 
     * @param {module:api/JobsApi~getJobByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJob}
     */
    this.getJobByID = function(username, password, jobID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobByID");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJobByID");
      }

      // verify the required parameter 'jobID' is set
      if (jobID === undefined || jobID === null) {
        throw new Error("Missing the required parameter 'jobID' when calling getJobByID");
      }


      var pathParams = {
        'jobID': jobID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetJob;

      return this.apiClient.callApi(
        '/jobs/{jobID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobFileLog operation.
     * @callback module:api/JobsApi~getJobFileLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the file log for a job in some job group
     * The file log from some job
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupNamejobGroupID 
     * @param {module:api/JobsApi~getJobFileLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileLog}
     */
    this.getJobFileLog = function(username, password, jobName, jobGroupNamejobGroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobFileLog");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJobFileLog");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobFileLog");
      }

      // verify the required parameter 'jobGroupNamejobGroupID' is set
      if (jobGroupNamejobGroupID === undefined || jobGroupNamejobGroupID === null) {
        throw new Error("Missing the required parameter 'jobGroupNamejobGroupID' when calling getJobFileLog");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName|jobGroupID': jobGroupNamejobGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileLog;

      return this.apiClient.callApi(
        '/jobs/filelog/{jobName}/{jobGroupName|jobGroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobLog operation.
     * @callback module:api/JobsApi~getJobLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the job log for a job in some job group
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupName 
     * @param {module:api/JobsApi~getJobLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobLog}
     */
    this.getJobLog = function(username, password, jobName, jobGroupName, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobLog");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJobLog");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobLog");
      }

      // verify the required parameter 'jobGroupName' is set
      if (jobGroupName === undefined || jobGroupName === null) {
        throw new Error("Missing the required parameter 'jobGroupName' when calling getJobLog");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName': jobGroupName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobLog;

      return this.apiClient.callApi(
        '/jobs/joblog/{jobName}/{jobGroupName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobLogWithRunNumber operation.
     * @callback module:api/JobsApi~getJobLogWithRunNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the job log for a job in some job group for a specific job run
     * The job log from some job for a specific job run
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupName 
     * @param {String} runNumber can be 0, 1 or 2
     * @param {module:api/JobsApi~getJobLogWithRunNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobLog}
     */
    this.getJobLogWithRunNumber = function(username, password, jobName, jobGroupName, runNumber, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobLogWithRunNumber");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJobLogWithRunNumber");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getJobLogWithRunNumber");
      }

      // verify the required parameter 'jobGroupName' is set
      if (jobGroupName === undefined || jobGroupName === null) {
        throw new Error("Missing the required parameter 'jobGroupName' when calling getJobLogWithRunNumber");
      }

      // verify the required parameter 'runNumber' is set
      if (runNumber === undefined || runNumber === null) {
        throw new Error("Missing the required parameter 'runNumber' when calling getJobLogWithRunNumber");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName': jobGroupName,
        'runNumber': runNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobLog;

      return this.apiClient.callApi(
        '/jobs/joblog/{jobName}/{jobGroupName}/{runNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobView operation.
     * @callback module:api/JobsApi~getJobViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a job view by job view name or job view ID
     * Return a jobs from some job view.
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobviewnamejobviewID 
     * @param {module:api/JobsApi~getJobViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobView}
     */
    this.getJobView = function(username, password, jobviewnamejobviewID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobView");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getJobView");
      }

      // verify the required parameter 'jobviewnamejobviewID' is set
      if (jobviewnamejobviewID === undefined || jobviewnamejobviewID === null) {
        throw new Error("Missing the required parameter 'jobviewnamejobviewID' when calling getJobView");
      }


      var pathParams = {
        'jobviewname|jobviewID': jobviewnamejobviewID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobView;

      return this.apiClient.callApi(
        '/jobs/jobview/{jobviewname|jobviewID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListJobs operation.
     * @callback module:api/JobsApi~getListJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of jobs from a specified job group
     * Return a list of jobs from a specified job group
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobgroupnamejobgroupID 
     * @param {module:api/JobsApi~getListJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobs}
     */
    this.getListJobs = function(username, password, jobgroupnamejobgroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getListJobs");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getListJobs");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling getListJobs");
      }


      var pathParams = {
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListJobs;

      return this.apiClient.callApi(
        '/listjobs/{jobgroupname|jobgroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatsLog operation.
     * @callback module:api/JobsApi~getStatsLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatisticLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the statistic log for a job in some job group
     * The statistic log from some job
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupNamejobGroupID 
     * @param {module:api/JobsApi~getStatsLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatisticLog}
     */
    this.getStatsLog = function(username, password, jobName, jobGroupNamejobGroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getStatsLog");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getStatsLog");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getStatsLog");
      }

      // verify the required parameter 'jobGroupNamejobGroupID' is set
      if (jobGroupNamejobGroupID === undefined || jobGroupNamejobGroupID === null) {
        throw new Error("Missing the required parameter 'jobGroupNamejobGroupID' when calling getStatsLog");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName|jobGroupID': jobGroupNamejobGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatisticLog;

      return this.apiClient.callApi(
        '/jobs/statslog/{jobName}/{jobGroupName|jobGroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatsLogWithRunNumber operation.
     * @callback module:api/JobsApi~getStatsLogWithRunNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatisticLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the statistic log for a job in some job group for a specific job run
     * The statistic log from some job for a specific job run
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobName 
     * @param {String} jobGroupNamejobGroupID 
     * @param {String} runNumber can be 0, 1 or 2
     * @param {module:api/JobsApi~getStatsLogWithRunNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatisticLog}
     */
    this.getStatsLogWithRunNumber = function(username, password, jobName, jobGroupNamejobGroupID, runNumber, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getStatsLogWithRunNumber");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getStatsLogWithRunNumber");
      }

      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling getStatsLogWithRunNumber");
      }

      // verify the required parameter 'jobGroupNamejobGroupID' is set
      if (jobGroupNamejobGroupID === undefined || jobGroupNamejobGroupID === null) {
        throw new Error("Missing the required parameter 'jobGroupNamejobGroupID' when calling getStatsLogWithRunNumber");
      }

      // verify the required parameter 'runNumber' is set
      if (runNumber === undefined || runNumber === null) {
        throw new Error("Missing the required parameter 'runNumber' when calling getStatsLogWithRunNumber");
      }


      var pathParams = {
        'jobName': jobName,
        'jobGroupName|jobGroupID': jobGroupNamejobGroupID,
        'runNumber': runNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatisticLog;

      return this.apiClient.callApi(
        '/jobs/statslog/{jobName}/{jobGroupName|jobGroupID}/{runNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the hardDeleteJob operation.
     * @callback module:api/JobsApi~hardDeleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hard Delete a job by ID or name
     * Hard delete specific job from the database.
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteJob} opts.jSONForHardDeleteJob 
     * @param {module:api/JobsApi~hardDeleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.hardDeleteJob = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForHardDeleteJob'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling hardDeleteJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling hardDeleteJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/jobs', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the statsJob operation.
     * @callback module:api/JobsApi~statsJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request specific statistics from a job by group name or group ID
     * Request specific statistics from a job by group name or group ID by including a JSON array with the stats to be returned
     * @param {String} username 
     * @param {String} password 
     * @param {String} jobname 
     * @param {String} jobgroupnamejobgroupID 
     * @param {Object} opts Optional parameters
     * @param {module:model/Stats} opts.jSONToVieweditStatsForTheJob 
     * @param {module:api/JobsApi~statsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatsResponse}
     */
    this.statsJob = function(username, password, jobname, jobgroupnamejobgroupID, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONToVieweditStatsForTheJob'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling statsJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling statsJob");
      }

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling statsJob");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling statsJob");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatsResponse;

      return this.apiClient.callApi(
        '/jobs/stats/{jobname}/{jobgroupname|jobgroupID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the statsRunNumberJob operation.
     * @callback module:api/JobsApi~statsRunNumberJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request specific statistics from a job with a group name or group ID by run number
     * Request specific statistics from a job by group name or group ID and number. The number can be 0, 1 and 2
     * @param {String} jobname 
     * @param {String} jobgroupnamejobgroupID 
     * @param {String} runnumber can be 0, 1 and 2
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {module:model/Stats} opts.jSONToVieweditStatsForTheJob 
     * @param {module:api/JobsApi~statsRunNumberJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatsResponse}
     */
    this.statsRunNumberJob = function(jobname, jobgroupnamejobgroupID, runnumber, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONToVieweditStatsForTheJob'];

      // verify the required parameter 'jobname' is set
      if (jobname === undefined || jobname === null) {
        throw new Error("Missing the required parameter 'jobname' when calling statsRunNumberJob");
      }

      // verify the required parameter 'jobgroupnamejobgroupID' is set
      if (jobgroupnamejobgroupID === undefined || jobgroupnamejobgroupID === null) {
        throw new Error("Missing the required parameter 'jobgroupnamejobgroupID' when calling statsRunNumberJob");
      }

      // verify the required parameter 'runnumber' is set
      if (runnumber === undefined || runnumber === null) {
        throw new Error("Missing the required parameter 'runnumber' when calling statsRunNumberJob");
      }


      var pathParams = {
        'jobname': jobname,
        'jobgroupname|jobgroupID': jobgroupnamejobgroupID,
        'runnumber': runnumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': opts['username'],
        'password': opts['password']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatsResponse;

      return this.apiClient.callApi(
        '/jobs/stats/{jobname}/{jobgroupname|jobgroupID}/{runnumber}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJob operation.
     * @callback module:api/JobsApi~updateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit job
     * Edit a job
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditJob} opts.jSONForEditAJob 
     * @param {module:api/JobsApi~updateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.updateJob = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForEditAJob'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateJob");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling updateJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/jobs', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
