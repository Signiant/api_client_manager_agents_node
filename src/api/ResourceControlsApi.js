/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivateDeactivateResourceControl', 'model/ActivateDeactivateResourceControlsResponse', 'model/CreateResourceControlResponse', 'model/ListResourceControlQueueResponse', 'model/ListResourceControlsResponse', 'model/ResourceControl', 'model/ResourceControlResponse', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivateDeactivateResourceControl'), require('../model/ActivateDeactivateResourceControlsResponse'), require('../model/CreateResourceControlResponse'), require('../model/ListResourceControlQueueResponse'), require('../model/ListResourceControlsResponse'), require('../model/ResourceControl'), require('../model/ResourceControlResponse'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.ManageragentsApi) {
      root.ManageragentsApi = {};
    }
    root.ManageragentsApi.ResourceControlsApi = factory(root.ManageragentsApi.ApiClient, root.ManageragentsApi.ActivateDeactivateResourceControl, root.ManageragentsApi.ActivateDeactivateResourceControlsResponse, root.ManageragentsApi.CreateResourceControlResponse, root.ManageragentsApi.ListResourceControlQueueResponse, root.ManageragentsApi.ListResourceControlsResponse, root.ManageragentsApi.ResourceControl, root.ManageragentsApi.ResourceControlResponse, root.ManageragentsApi.Success);
  }
}(this, function(ApiClient, ActivateDeactivateResourceControl, ActivateDeactivateResourceControlsResponse, CreateResourceControlResponse, ListResourceControlQueueResponse, ListResourceControlsResponse, ResourceControl, ResourceControlResponse, Success) {
  'use strict';

  /**
   * ResourceControls service.
   * @module api/ResourceControlsApi
   * @version 14.1.0
   */

  /**
   * Constructs a new ResourceControlsApi. 
   * @alias module:api/ResourceControlsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateResourceControl operation.
     * @callback module:api/ResourceControlsApi~activateResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateDeactivateResourceControlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate resource control
     * Activates a resource control.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {module:model/ActivateDeactivateResourceControl} resourceControl The attributes of the resource control to be activated 
     * @param {module:api/ResourceControlsApi~activateResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateDeactivateResourceControlsResponse}
     */
    this.activateResourceControl = function(username, password, resourceControl, callback) {
      var postBody = resourceControl;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling activateResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling activateResourceControl");
      }

      // verify the required parameter 'resourceControl' is set
      if (resourceControl === undefined || resourceControl === null) {
        throw new Error("Missing the required parameter 'resourceControl' when calling activateResourceControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivateDeactivateResourceControlsResponse;

      return this.apiClient.callApi(
        '/activateresourcecontrols', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createResourceControl operation.
     * @callback module:api/ResourceControlsApi~createResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResourceControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create resource control
     * Creates a resource control.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {module:model/ResourceControl} resourceControl The attributes of the resource control to be created. All create resourcecontrols requests must include a **name** for the resource control Resource Control requests must include a valid \"configuration\" object. 
     * @param {module:api/ResourceControlsApi~createResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResourceControlResponse}
     */
    this.createResourceControl = function(username, password, resourceControl, callback) {
      var postBody = resourceControl;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createResourceControl");
      }

      // verify the required parameter 'resourceControl' is set
      if (resourceControl === undefined || resourceControl === null) {
        throw new Error("Missing the required parameter 'resourceControl' when calling createResourceControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateResourceControlResponse;

      return this.apiClient.callApi(
        '/resourcecontrols', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateResourceControl operation.
     * @callback module:api/ResourceControlsApi~deactivateResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateDeactivateResourceControlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate resource control
     * Deactivates a resource control.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivateDeactivateResourceControl} opts.resourceControl The attributes of the resource control to be deactivated 
     * @param {module:api/ResourceControlsApi~deactivateResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateDeactivateResourceControlsResponse}
     */
    this.deactivateResourceControl = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['resourceControl'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deactivateResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deactivateResourceControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActivateDeactivateResourceControlsResponse;

      return this.apiClient.callApi(
        '/deactivateresourcecontrols', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceControl operation.
     * @callback module:api/ResourceControlsApi~deleteResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete resource control
     * Deletes specific resource control by name or by resource controlID
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} resourcecontrolnameresourcecontrolID resource control **name* or resource **controlID**
     * @param {module:api/ResourceControlsApi~deleteResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.deleteResourceControl = function(username, password, resourcecontrolnameresourcecontrolID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deleteResourceControl");
      }

      // verify the required parameter 'resourcecontrolnameresourcecontrolID' is set
      if (resourcecontrolnameresourcecontrolID === undefined || resourcecontrolnameresourcecontrolID === null) {
        throw new Error("Missing the required parameter 'resourcecontrolnameresourcecontrolID' when calling deleteResourceControl");
      }


      var pathParams = {
        'resourcecontrolname|resourcecontrolID': resourcecontrolnameresourcecontrolID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/resourcecontrols/resourcecontrolname|resourcecontrolID', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editResourceControl operation.
     * @callback module:api/ResourceControlsApi~editResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a resource control
     * Modifies a specific resource control.
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceControl} opts.resourceControl The attributes of the resource control to be modified. 
     * @param {module:api/ResourceControlsApi~editResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.editResourceControl = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['resourceControl'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling editResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling editResourceControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/resourcecontrols', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsumersResourceControl operation.
     * @callback module:api/ResourceControlsApi~getConsumersResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourceControlQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all consumers by name or ID for a specified resource control.
     * Gets a list of all consumers by name or ID for a specified resource control.
     * @param {String} resourcecontrolnameresourcecontrolID Resource control name or resourcecontrolID
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Administrator user name.
     * @param {String} opts.password Administrator password
     * @param {module:api/ResourceControlsApi~getConsumersResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourceControlQueueResponse}
     */
    this.getConsumersResourceControl = function(resourcecontrolnameresourcecontrolID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'resourcecontrolnameresourcecontrolID' is set
      if (resourcecontrolnameresourcecontrolID === undefined || resourcecontrolnameresourcecontrolID === null) {
        throw new Error("Missing the required parameter 'resourcecontrolnameresourcecontrolID' when calling getConsumersResourceControl");
      }


      var pathParams = {
        'resourcecontrolname|resourcecontrolID': resourcecontrolnameresourcecontrolID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': opts['username'],
        'password': opts['password']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResourceControlQueueResponse;

      return this.apiClient.callApi(
        '/listresourcecontrolqueue/resourcecontrolname|resourcecontrolID', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getresourceControl operation.
     * @callback module:api/ResourceControlsApi~getresourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a specific resource control
     * Returns details about specific resource controlby **name** or **ID**
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} resourcecontrolnameresourcecontrolID resource control **name** or **resourceControlID**
     * @param {module:api/ResourceControlsApi~getresourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceControlResponse}
     */
    this.getresourceControl = function(username, password, resourcecontrolnameresourcecontrolID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getresourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getresourceControl");
      }

      // verify the required parameter 'resourcecontrolnameresourcecontrolID' is set
      if (resourcecontrolnameresourcecontrolID === undefined || resourcecontrolnameresourcecontrolID === null) {
        throw new Error("Missing the required parameter 'resourcecontrolnameresourcecontrolID' when calling getresourceControl");
      }


      var pathParams = {
        'resourcecontrolname|resourcecontrolID': resourcecontrolnameresourcecontrolID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResourceControlResponse;

      return this.apiClient.callApi(
        '/resourcecontrols/resourcecontrolname|resourcecontrolID', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listresourcecontrols operation.
     * @callback module:api/ResourceControlsApi~listresourcecontrolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourceControlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Resource Controls
     * Get a list of all Resource Controls
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {module:api/ResourceControlsApi~listresourcecontrolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourceControlsResponse}
     */
    this.listresourcecontrols = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listresourcecontrols");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling listresourcecontrols");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResourceControlsResponse;

      return this.apiClient.callApi(
        '/listresourcecontrols', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveAgentResourceControl operation.
     * @callback module:api/ResourceControlsApi~moveAgentResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move jobs in the Agent|MediaExchange resource control queue.
     * Move jobs in the Agent and Media Exchange resource control queue. To move the job to the left, the value can be: ..., -3, -2, -1. To move the job to the right, the value can be: 1, 2, 3, .... 
     * @param {String} consumerID The Consumer ID
     * @param {String} value To move the job to the left, the value can be: ..., -3, -2, -1. To move the job to the right, the value can be: 1, 2, 3,... 
     * @param {Object} opts Optional parameters
     * @param {String} opts.usernamex Administrator user name.
     * @param {String} opts.password Administrator password.
     * @param {module:api/ResourceControlsApi~moveAgentResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.moveAgentResourceControl = function(consumerID, value, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'consumerID' is set
      if (consumerID === undefined || consumerID === null) {
        throw new Error("Missing the required parameter 'consumerID' when calling moveAgentResourceControl");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling moveAgentResourceControl");
      }


      var pathParams = {
        'consumerID': consumerID,
        'value': value
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'usernamex': opts['usernamex'],
        'password': opts['password']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/resourceontrols/move/consumerID/value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveJobResourceControl operation.
     * @callback module:api/ResourceControlsApi~moveJobResourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move jobs in resource control queue.
     * Move jobs in the job resource control queue. To move the job to the left, the value can be: ..., -3, -2, -1. To move the job to the right, the value can be: 1, 2, 3,... 
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} jobnamejobID Job name or JobID of the job that should be moved
     * @param {String} jobgroupname Job group name of the job that should be moved
     * @param {String} value To move the job to the left, the value can be: ..., -3, -2, -1. To move the job to the right, the value can be: 1, 2, 3,... 
     * @param {module:api/ResourceControlsApi~moveJobResourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.moveJobResourceControl = function(username, password, jobnamejobID, jobgroupname, value, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling moveJobResourceControl");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling moveJobResourceControl");
      }

      // verify the required parameter 'jobnamejobID' is set
      if (jobnamejobID === undefined || jobnamejobID === null) {
        throw new Error("Missing the required parameter 'jobnamejobID' when calling moveJobResourceControl");
      }

      // verify the required parameter 'jobgroupname' is set
      if (jobgroupname === undefined || jobgroupname === null) {
        throw new Error("Missing the required parameter 'jobgroupname' when calling moveJobResourceControl");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling moveJobResourceControl");
      }


      var pathParams = {
        'jobname|jobID': jobnamejobID,
        'jobgroupname': jobgroupname,
        'value': value
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/resourcecontrols/move/jobname|jobID/jobgroupname/value', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
