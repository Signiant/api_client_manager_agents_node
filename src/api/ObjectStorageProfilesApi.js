/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateObjectStorageResponse', 'model/EditS3StorageProfile', 'model/GetS3StorageProfile', 'model/ListStorageProfiles', 'model/StorageProfile', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateObjectStorageResponse'), require('../model/EditS3StorageProfile'), require('../model/GetS3StorageProfile'), require('../model/ListStorageProfiles'), require('../model/StorageProfile'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.ManageragentsApi) {
      root.ManageragentsApi = {};
    }
    root.ManageragentsApi.ObjectStorageProfilesApi = factory(root.ManageragentsApi.ApiClient, root.ManageragentsApi.CreateObjectStorageResponse, root.ManageragentsApi.EditS3StorageProfile, root.ManageragentsApi.GetS3StorageProfile, root.ManageragentsApi.ListStorageProfiles, root.ManageragentsApi.StorageProfile, root.ManageragentsApi.Success);
  }
}(this, function(ApiClient, CreateObjectStorageResponse, EditS3StorageProfile, GetS3StorageProfile, ListStorageProfiles, StorageProfile, Success) {
  'use strict';

  /**
   * ObjectStorageProfiles service.
   * @module api/ObjectStorageProfilesApi
   * @version 14.1.0
   */

  /**
   * Constructs a new ObjectStorageProfilesApi. 
   * @alias module:api/ObjectStorageProfilesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createObjectStorageProfile operation.
     * @callback module:api/ObjectStorageProfilesApi~createObjectStorageProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateObjectStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Local S3 object storage profile
     * Local S3 Object storage profile.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageProfile} opts.jSONForCreateLocalS3ObjectStorageProfileJSONForAzureStorageProfileIsInModelCreateAzureStorageProfileAndJSONForAWSS3StorageProfileIsInModelCreateAWSS3StorageProfile 
     * @param {module:api/ObjectStorageProfilesApi~createObjectStorageProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateObjectStorageResponse}
     */
    this.createObjectStorageProfile = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForCreateLocalS3ObjectStorageProfileJSONForAzureStorageProfileIsInModelCreateAzureStorageProfileAndJSONForAWSS3StorageProfileIsInModelCreateAWSS3StorageProfile'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createObjectStorageProfile");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createObjectStorageProfile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateObjectStorageResponse;

      return this.apiClient.callApi(
        '/storageprofiles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStorageProfile operation.
     * @callback module:api/ObjectStorageProfilesApi~deleteStorageProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Local S3/Azure/AWS S3 object storage profile
     * Deletes specific storage profileby name or by ID
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} storageprofilenamestorageprofileID storage profile name or storage profile ID
     * @param {module:api/ObjectStorageProfilesApi~deleteStorageProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.deleteStorageProfile = function(username, password, storageprofilenamestorageprofileID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteStorageProfile");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deleteStorageProfile");
      }

      // verify the required parameter 'storageprofilenamestorageprofileID' is set
      if (storageprofilenamestorageprofileID === undefined || storageprofilenamestorageprofileID === null) {
        throw new Error("Missing the required parameter 'storageprofilenamestorageprofileID' when calling deleteStorageProfile");
      }


      var pathParams = {
        'storageprofilename|storageprofileID': storageprofilenamestorageprofileID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/storageprofiles/{storageprofilename|storageprofileID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editObjectStorageProfile operation.
     * @callback module:api/ObjectStorageProfilesApi~editObjectStorageProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Local S3 object storage profile
     * Object storage profile
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditS3StorageProfile} opts.jSONForEditLocalS3ObjectStorageProfile 
     * @param {module:api/ObjectStorageProfilesApi~editObjectStorageProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.editObjectStorageProfile = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['jSONForEditLocalS3ObjectStorageProfile'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling editObjectStorageProfile");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling editObjectStorageProfile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/storageprofiles', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListStorageProfiles operation.
     * @callback module:api/ObjectStorageProfilesApi~getListStorageProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStorageProfiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all object storage profiles
     * Return a list of all object storage profiles
     * @param {String} username 
     * @param {String} password 
     * @param {module:api/ObjectStorageProfilesApi~getListStorageProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStorageProfiles}
     */
    this.getListStorageProfiles = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getListStorageProfiles");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getListStorageProfiles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListStorageProfiles;

      return this.apiClient.callApi(
        '/liststorageprofiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalS3StorageProfile operation.
     * @callback module:api/ObjectStorageProfilesApi~getLocalS3StorageProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetS3StorageProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Local S3 Storage Profile by name or storage profile ID
     * Returns details about specific Local S3 Storage profile
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {String} storageprofilenamestorageprofileID The storage profile name or storage profile ID
     * @param {module:api/ObjectStorageProfilesApi~getLocalS3StorageProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetS3StorageProfile}
     */
    this.getLocalS3StorageProfile = function(username, password, storageprofilenamestorageprofileID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getLocalS3StorageProfile");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getLocalS3StorageProfile");
      }

      // verify the required parameter 'storageprofilenamestorageprofileID' is set
      if (storageprofilenamestorageprofileID === undefined || storageprofilenamestorageprofileID === null) {
        throw new Error("Missing the required parameter 'storageprofilenamestorageprofileID' when calling getLocalS3StorageProfile");
      }


      var pathParams = {
        'storageprofilename|storageprofileID': storageprofilenamestorageprofileID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetS3StorageProfile;

      return this.apiClient.callApi(
        '/storageprofiles/{storageprofilename|storageprofileID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
