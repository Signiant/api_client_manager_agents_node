/*
 * Manager+Agents API
 * Signiant Manager+Agents provides a REST API to automate user management, user group, agent groups, jobs, resource controls, and job groups. 
 *
 * OpenAPI spec version: 14.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateUserGroupResponse', 'model/ListUserGroupsResponse', 'model/Success', 'model/UserGroup', 'model/UserGroupResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateUserGroupResponse'), require('../model/ListUserGroupsResponse'), require('../model/Success'), require('../model/UserGroup'), require('../model/UserGroupResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ManageragentsApi) {
      root.ManageragentsApi = {};
    }
    root.ManageragentsApi.UserGroupsApi = factory(root.ManageragentsApi.ApiClient, root.ManageragentsApi.CreateUserGroupResponse, root.ManageragentsApi.ListUserGroupsResponse, root.ManageragentsApi.Success, root.ManageragentsApi.UserGroup, root.ManageragentsApi.UserGroupResponse);
  }
}(this, function(ApiClient, CreateUserGroupResponse, ListUserGroupsResponse, Success, UserGroup, UserGroupResponse) {
  'use strict';

  /**
   * UserGroups service.
   * @module api/UserGroupsApi
   * @version 14.1.0
   */

  /**
   * Constructs a new UserGroupsApi. 
   * @alias module:api/UserGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUserGroup operation.
     * @callback module:api/UserGroupsApi~createUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user group
     * Creates a new user group.
     * @param {String} username Administrator user name.
     * @param {String} password Administrator password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroup} opts.userGroup Create a new user group.  All new user groups must include the `groupName` field. 
     * @param {module:api/UserGroupsApi~createUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserGroupResponse}
     */
    this.createUserGroup = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['userGroup'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createUserGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createUserGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserGroup operation.
     * @callback module:api/UserGroupsApi~deleteUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user group by name or by groupID
     * Deletes specific user group
     * @param {String} username 
     * @param {String} password 
     * @param {String} groupnamegroupID group name or goupID
     * @param {module:api/UserGroupsApi~deleteUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.deleteUserGroup = function(username, password, groupnamegroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteUserGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling deleteUserGroup");
      }

      // verify the required parameter 'groupnamegroupID' is set
      if (groupnamegroupID === undefined || groupnamegroupID === null) {
        throw new Error("Missing the required parameter 'groupnamegroupID' when calling deleteUserGroup");
      }


      var pathParams = {
        'groupname|groupID': groupnamegroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/usergroups/{groupname|groupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editUserGroup operation.
     * @callback module:api/UserGroupsApi~editUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a user group
     * Modifies a specific user group.
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroup} opts.userGroup The attributes of the user group to be modified.  User group requests must include the group name. 
     * @param {module:api/UserGroupsApi~editUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.editUserGroup = function(username, password, opts, callback) {
      opts = opts || {};
      var postBody = opts['userGroup'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling editUserGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling editUserGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/usergroups', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroup operation.
     * @callback module:api/UserGroupsApi~getUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user group by name or by groupID
     * Returns details about specific user group
     * @param {String} username 
     * @param {String} password 
     * @param {String} groupnamegroupID group name or goupID
     * @param {module:api/UserGroupsApi~getUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupResponse}
     */
    this.getUserGroup = function(username, password, groupnamegroupID, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserGroup");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getUserGroup");
      }

      // verify the required parameter 'groupnamegroupID' is set
      if (groupnamegroupID === undefined || groupnamegroupID === null) {
        throw new Error("Missing the required parameter 'groupnamegroupID' when calling getUserGroup");
      }


      var pathParams = {
        'groupname|groupID': groupnamegroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups/{groupname|groupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserGroups operation.
     * @callback module:api/UserGroupsApi~listUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of user groups
     * List all user groups.
     * @param {String} username 
     * @param {String} password 
     * @param {module:api/UserGroupsApi~listUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserGroupsResponse}
     */
    this.listUserGroups = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listUserGroups");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling listUserGroups");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'username': username,
        'password': password
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListUserGroupsResponse;

      return this.apiClient.callApi(
        '/listusergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
